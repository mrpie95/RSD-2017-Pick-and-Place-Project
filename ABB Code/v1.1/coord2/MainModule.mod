MODULE MainModule
    
    PROC Wait()
        WaitTime (2);
    ENDPROC
	PROC Close()
        Reset doGripOpen;
		Set doGripClose;
		WaitTime 2;
		Reset doGripClose;
    ENDPROC
	PROC Open()
        Reset doGripClose;
		Set doGripOpen;
		WaitTime 2;
		Reset doGripOpen;
    ENDPROC
    
    PROC Drop()
        PERS num color;
        PERS num blue;
        PERS num red;
        PERS num green;
        PERS num black;
        
        IF color = 1 THEN
            blue := blue + 12;
            MoveJ [[245, -100, 300],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            MoveJ [[245, -100, blue],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Open;
            MoveJ [[245, -100, 300],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
        ELSEIF color = 2 THEN
            red := red + 12;
            MoveJ [[245, 000, 300],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            MoveJ [[245, 000, red],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Open;
            MoveJ [[245, 000, 300],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
        ELSEIF color = 3 THEN
            green := green + 12;
            MoveJ [[245, 100, 300],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            MoveJ [[245, 100, green],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Open;
            MoveJ [[245, 100, 300],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
        ELSEIF color = 4 THEN
            black := black + 12;
            MoveJ [[400, 185, 300],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            MoveJ [[400, 185, black],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Open;
            MoveJ [[400, 185, 300],[0.0121433,0.70561,0.708407,0.0112634],[-1,-1,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0; 
       ENDIF
    ENDPROC

    PROC AnalBits()
        PERS num color;
        PERS num blk;
        
        IF bits = 00000000 THEN
            color = 1;
        ELSEIF bits = 00000001 THEN
            color = 2;
        ELSEIF bits = 00000010 THEN
            color = 3;
        ELSEIF bits = 00000011 THEN
            color = 4;
        ENDIF
        
        IF bits = 00000100 THEN
            blk = 1;
        ELSEIF bits = 00000100 THEN
            blk = 2;
        ELSEIF bits = 00000100 THEN
            blk = 3;
        ELSEIF bits = 00000100 THEN
            blk = 4;
        ELSEIF bits = 00000100 THEN
            blk = 5;
        ELSEIF bits = 00000100 THEN
            blk = 6;
        ELSEIF bits = 00000100 THEN
            blk = 7;
        ELSEIF bits = 00000100 THEN
            blk = 8;
        ELSEIF bits = 00000100 THEN
            blk = 9;
        ENDIF
        
    ENDPROC
    
    PROC Move()
        PERS num blk;
        
        IF blk = 1 THEN
            MoveJ [[312, -103, 300],[0.012145,0.705599,0.708418,0.0112633],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            MoveJ [[312, -103, 190],[0.0121448,0.705599,0.708418,0.0112634],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Close;
            MoveJ [[312, -103, 300],[0.012145,0.705599,0.708418,0.0112633],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
        ELSEIF blk = 2 THEN
            MoveJ [[312, -23,  300],[0.0121486,0.705601,0.708415,0.0112673],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
    		MoveJ [[312, -23,  190],[0.0121486,0.705601,0.708415,0.0112673],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Close;
            MoveJ [[312, -23, 300],[0.0121486,0.705601,0.708415,0.0112673],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;         
        ELSEIF blk = 3 THEN
            MoveJ [[312, 58, 300],[0.0121518,0.705603,0.708413,0.011273],[0,-1,-3,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
    		MoveJ [[312, 58, 190],[0.0121518,0.705603,0.708413,0.011273],[0,-1,-3,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Close;
            MoveJ [[312, 58, 300],[0.0121518,0.705603,0.708413,0.011273],[0,-1,-3,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0; 
        ELSEIF blk = 4 THEN
            MoveJ [[390, -103, 300],[0.0121495,0.705599,0.708417,0.011267],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
    		MoveJ [[390, -103, 190],[0.0121495,0.705599,0.708417,0.011267],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Close;
            MoveJ [[390, -103, 300],[0.0121495,0.705599,0.708417,0.011267],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;               
        ELSEIF blk = 5 THEN
            MoveJ [[390, -23,  300],[0.0121514,0.705603,0.708414,0.0112673],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
    		MoveJ [[390, -23,  190],[0.0121514,0.705603,0.708414,0.0112673],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Close;
            MoveJ [[390, -23,  300],[0.0121514,0.705603,0.708414,0.0112673],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;            
        ELSEIF blk = 6 THEN
            MoveJ [[390, 58,   300],[0.0121549,0.705601,0.708415,0.0112726],[0,-1,-3,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
    		MoveJ [[390, 58,   190],[0.0121549,0.705601,0.708415,0.0112726],[0,-1,-3,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Close;
            MoveJ [[390, 58,   300],[0.0121549,0.705601,0.708415,0.0112726],[0,-1,-3,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;       
        ELSEIF blk = 7 THEN
            MoveJ [[472, -103, 300],[0.0121518,0.705602,0.708414,0.0112647],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
    		MoveJ [[472, -103, 190],[0.0121518,0.705602,0.708414,0.0112647],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Close;
            MoveJ [[472,-103, 300],[0.0121518,0.705602,0.708414,0.0112647],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;        
        ELSEIF blk = 8 THEN
            MoveJ [[472, -23,  300],[0.0121585,0.705606,0.708411,0.0112768],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
    		MoveJ [[472, -23,  190],[0.0121585,0.705606,0.708411,0.0112768],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Close;
            MoveJ [[472,-23, 300],[0.0121585,0.705606,0.708411,0.0112768],[-1,0,-4,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;      
        ELSEIF blk = 9 THEN
            MoveJ [[472, 58, 300],[0.0121476,0.705604,0.708413,0.0112577],[0,-1,-3,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            MoveJ [[472, 58, 190],[0.0121476,0.705604,0.708413,0.0112577],[0,-1,-3,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
            Wait;
            Close;
            MoveJ [[472, 58, 300],[0.0121476,0.705604,0.708413,0.0112577],[0,-1,-3,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]], v1000, z50, tool0;
        ENDIF
    ENDPROC
    
    PROC CheckBits()
        PERS num bits;
        
        IF DI10_11 = 1 THEN
			bits := 1bits;
        ELSE bits := 0bits;
		ENDIF
        IF DI10_11 = 1 THEN
			bits := 1bits;
        ELSE bits := 0bits;
		ENDIF
        IF DI10_11 = 1 THEN
			bits := 1bits;
        ELSE bits := 0bits;
		ENDIF
        IF DI10_11 = 1 THEN
			bits := 1bits;
        ELSE bits := 0bits;
		ENDIF
        IF DI10_11 = 1 THEN
			bits := 1bits;
        ELSE bits := 0bits;
		ENDIF
        IF DI10_11 = 1 THEN
			bits := 1bits;
        ELSE bits := 0bits;
		ENDIF
        IF DI10_11 = 1 THEN
			bits := 1bits;
        ELSE bits = 0bits;
		ENDIF
        IF DI10_11 = 1 THEN
			bits := 1bits;
        ELSE bits := 0bits;
		ENDIF
        
        
        IF DI10_11 = 1 THEN
			<SMT>
		ENDIF
    ENDPROC
    
    PROC main()
        
        PERS num bits := null;
        PERS num color := null;
        PERS num blk := null;
        
        PERS num red := 178;
        PERS num blue := 178;
        PERS num green := 178;
        PERS num black := 178;
        
        CheckBits;
        AnalBits;
        Move;
        Drop;
        
        
        
	ENDPROC
ENDMODULE